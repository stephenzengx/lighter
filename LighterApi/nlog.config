<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      internalLogLevel="Info" internalLogFile="logs\internal-nlog.txt"> 
	<!--internalLogFile 便于内部调试 target为 database其他复杂类型时可以看到debug信息-->
<!--+ xmlns,xsi是引入命名空间
    + autoReload="true"是热更新，在程序运行过程中也可以修改配置文件
    + throwExceptions：NLog日志系统抛出异常
    + internalLogLevel：日志级别
    + internalLogFile：内部日志文件
    + variable:定义变量
    + targets:日志输出地方
    + rules：日志的路由规则-->
  <extensions>
	      <add assembly="NLog.Web.AspNetCore"/>
  </extensions>
  <variable name="myvar" value="myvalue"/>
  <targets>
	<!--
	      xsi:type：输出文件的类型，File指的是文件
	      name：是指的输出地方的一个名词（给rules调用的）
          fileName：输出到目标文件的地址，使用的相对路径，可以自行配置输出的地点。
          layout：在最简单的形式中，布局是带有嵌入标记的文本，这些嵌入标记由${和分隔}
          archiveFileName:表示滚动日志存放路径
          archiveAboveSize：单次日志的存储大小（单位是KB），超过配置，会archiveFileName中创建新的日志
          archiveNumbering：Sequence（排序），Rolling（滚动）
          concurrentWrites:支持多个并发一起写文件，提高文件写入性能。
          keepFileOpen:为了提高文件写入性能，避免每次写入文件都开关文件
          autoFlush:为了提高日志写入性能，不必每次写入日志都直接写入到硬盘
          createDirs:若设置的日志文件夹不存在，则自动创建文件夹。
	    -->

  <!-- write logs to file -->
  <!--<target xsi:type="File" name="allfile" fileName="logs/${date:format=yyyyMM}/nlog-all-${shortdate}.log"
	  layout="${longdate}|${event-properties:item=EventId.Id}|${uppercase:${level}}|${logger} ${newline}${message} ${exception} ${newline}" />-->
	  <!--another file log, only own logs. Uses some ASP.NET core renderers--> 
  <target xsi:type="File" name="ownFile-web" fileName="logs/${date:format=yyyyMM}/nlog-own-${shortdate}.log"
			  layout="${longdate}|${event-properties:item=EventId.Id}|${uppercase:${level}}|${logger} ${newline}${message} ${exception} ${newline} --- |url: ${aspnet-request-url} | action: ${aspnet-mvc-action}" />
  <target name="logconsole" xsi:type="Console" />
    <!--Mysql.Data 需要nuget单独引-->
  <!--<target xsi:type="Database" name="database" dbProvider="MySql.Data.MySqlClient.MySqlConnection, Mysql.Data">
        <connectionString>${var:connectionString}</connectionString>
        <commandText>
          insert into NLog_Error (
          Guid,Application, Logged, Level, Message,
          Logger, CallSite, Exception,IP,User,UserName,Browser
          ) values (
          @Guid,@Application, @Logged, @Level, @Message,
          @Logger, @Callsite, @Exception, @IP,@User,@UserName,@Browser
          );
        </commandText>
        <parameter name="@Guid" layout="${guid}" />
        <parameter name="@Application" layout="LighterAPI" />
        <parameter name="@Logged" layout="${date}" />
        <parameter name="@Level" layout="${level}" />
        <parameter name="@Message" layout="${message}" />
        <parameter name="@Logger" layout="${logger}" />
        <parameter name="@CallSite" layout="${aspnet-request-url}" />
        <parameter name="@Exception" layout="${exception:toString}" />
        <parameter name="@IP" layout="${aspnet-request-ip}" />
        <parameter name="@User" layout="${aspnet-user-identity}" />
        <parameter name="@UserName" layout="${event-properties:item=userName}" />
        <parameter name="@Browser" layout="${aspnet-request-useragent}" />
      </target>-->
    </targets>

    <!--logger:代表一个路由的规则
    name:logger名称，若为*则表示适用于所有日志
    minlevel:表示当前日志的最低日志级别，只有等于或大于该值的日志级别才会被记录
    writeTo:和target的name匹配，一个rules对应一个target-->
    <rules>
		<logger name="*" minlevel="Info" writeTo="logconsole" />

		<!--<logger name="Microsoft.*" maxlevel="Info" final="true" />-->
		<!--<logger name="*" minlevel="Trace" writeTo="allfile" />-->
		<logger name="*" minlevel="Warn" writeTo="ownFile-web" />	
		<!--catch异常就可以放入数据库-->
        <!--<logger name="*.ErrorController" minlevel="Error" writeTo="database" />-->
    </rules>
</nlog>